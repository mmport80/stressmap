//******************************************************************
//Grabs data from VolKills.org
function getData(url){
	return $.ajax({ url: url, cache: true, async: true});
	}


function roundTwo(x){
	return Math.round(x*100)/100;
	}

//******************************************************************
//Portfolio object
function Portfolio(){
	this.positions = [];


	this.update = function(position){
		this.addPosition(position);
		}

	this.addPosition = function(position){
		this.positions = [position].concat(this.positions);
		}
	}

function PLs(){
	this.pls = [];
	
	this.addPL = function(pl,xi,yi){
		//find whether object already exists
		var matched = this.pls.filter(
					function(exists){
						//return true if object already exists
						return (exists.x == xi) && (exists.y == yi);
					});
		//all the other objects
		var notMatched = this.pls.filter(
					function(exists2){
						//return true if object is not in this array
						return !(exists2.x == xi && exists2.y == yi);
					});
		
		
		//console.log("1 ");
		//console.log(notMatched);
		//console.log(matched.length);
		
		//if something's found
		if (matched.length == 0){
			//push in new entry
			this.pls.push({y:yi, x:xi, pl:roundTwo(pl)});
			return {y:yi,x:xi,pl:roundTwo(pl)};
			}
		else{
			//sum existing PL with new one
			//console.log("2 ");
			//console.log(matched[0],pl);
			var sum = pl + roundTwo(matched[0].pl);
			//push in new entry
			notMatched.push({y:yi, x:xi, pl:sum });
			//return updated set of PLs
			this.pls = notMatched;
			//this.pls = [];
			
			console.log("0");
			console.log({y:yi, x:xi, pl:sum });
			console.log("1");
			console.log(this.pls);
			console.log("2");
			console.log(notMatched);
			
			return {y:yi, x:xi, pl:sum };
			}
		}
	}

function getShocks(volShocks,eqShocks){
	a = volShocks;
	
	d = eqShocks;
	
	e = [];

	d.forEach(function(f) {		
		b = [];
		a.forEach(function(c) {
			b.push([c,f]);
			});
		e.push(b);
		});

	return e;
	}

//******************************************************************
//******************************************************************
function Equity(quantity,stockPrice,mktV){
	//Holding related inputs
	this.quantity   = quantity;
	this.stockPrice	= stockPrice;
	this.mktV	= mktV;

	//Results
	this.delta = 1;
	this.gamma = 0;
	this.vega = 0;
	this.vGamma = 0;
	this.nPV = mktV;
	this.iV = 0;

	this.getAnalyticalResults = function(shocks){
		var f = this;
		shocks.forEach(function(shockVector){
			shockVector.forEach(function(shock){
				f.getNumericalResult(f.nPV,shock[0],shock[1]);
				});
			});
		}
		
	this.getNumericalResult = function(npv,x,y){
				//add to array of shocked results
				console.log(this.quantity,npv,y);
				px.addPL(this.quantity*npv*y,x,y);
				//console.log(px.pls);
				//console.log("dfdf ",npv*y,x,y);
				//console.log(px.addPL(npv*y,x,y));
				//console.log(px.pls);
				//append only specific PL to SVG table
				xo();
				
		}
	}

//******************************************************************
//******************************************************************
//Option object
function Option(quantity,vDate,strike,eDate,putOrCall,stockPrice,mktV,divYield,intRate){
	//Holding related inputs
	this.quantity = quantity;

	//VolKills.org Inputs
	this.vDate	= vDate;
	this.strike	= strike;
	this.eDate	= eDate;
	this.putOrCall	= putOrCall;
	this.stockPrice	= stockPrice;
	this.mktV	= mktV;
	this.divYield	= divYield;
	this.intRate	= intRate;

	//Results
	this.delta;
	this.gamma;
	this.vega;
	this.vGamma;
	this.nPV;

	this.getAnalyticalResults = function(shocks){
		var f = this;
		
		var url = 'http://volkills.org/version/stable/equity_option/effective/year/'+f.vDate.getUTCFullYear()+'/month/'+(f.vDate.getUTCMonth()+1)+'/day/'+f.vDate.getUTCDate()+'/market_value/'+f.mktV+'/expiry/year/'+f.eDate.getUTCFullYear()+'/month/'+(f.eDate.getUTCMonth()+1)+'/day/'+f.eDate.getDate()+'/strike_price/'+f.strike+'/style/european/put_or_call/'+f.putOrCall+'/underlying_price/'+f.stockPrice+'/dividend_yield/'+f.divYield+'/interest_rate/'+f.intRate;
		
		//console.log(url);
		var promise = getData(url);
		promise.success(function (response) {
		  		f.delta = $(response).find('#Delta').contents()[0].textContent;
				f.vega = $(response).find('#Vega').contents()[0].textContent;
				f.nPV = $(response).find('#NPV').contents()[0].textContent;
				f.gamma = $(response).find('#Gamma').contents()[0].textContent;
				f.iV = $(response).find("[id='Implied Volatility']").contents()[0].textContent;
				
				
				shocks.forEach(function(shockVector){
					shockVector.forEach(function(shock){
						f.getNumericalResult(f.nPV,shock[0],shock[1]);
						});
					});
				});
		}
		
	this.getNumericalResult = function(npv,x,y){
		var f = this;
		
		//shocks - default is zero
		//shock prob use log shocks rather than simple
		var url = 'http://volkills.org/version/stable/equity_option/effective/year/'+f.vDate.getUTCFullYear()+'/month/'+(f.vDate.getUTCMonth()+1)+'/day/'+f.vDate.getUTCDate()+'/volatility_rate/'+f.iV*(1+x)+'/expiry/year/'+f.eDate.getUTCFullYear()+'/month/'+(f.eDate.getUTCMonth()+1)+'/day/'+(f.eDate.getUTCDate())+'/strike_price/'+f.strike+'/style/european/put_or_call/'+f.putOrCall+'/underlying_price/'+f.stockPrice*(1+y)+'/dividend_yield/'+f.divYield+'/interest_rate/'+f.intRate;
		
		//console.log(a,b,url)
		
		var promise = getData(url);
		promise.success(
			function (response) {
				//add to array of shocked results
				shockedNPV = $(response).find('#NPV').contents()[0].textContent;
				result = px.addPL(f.quantity*(shockedNPV - npv),x,y);
				
				//console.log(px.pls);
				//append only specific PL to SVG table
				xo([{result}]);
				}
			);
		}

	}
